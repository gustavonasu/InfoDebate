require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::ComplaintsController do
  include ControllerHelper

  before do
    @attrs = {:body => "Complaint text"}
    @user = FactoryGirl.create(:user)
    @comment = FactoryGirl.create(:comment, :with_thread, :user => @user)
  end
  
  def valid_attributes(attrs = @attrs, comment = @comment, user = @user)
    valid_attrs = attrs.dup
    valid_attrs[:comment_id] = comment.id
    valid_attrs[:user_id] = user.id
    valid_attrs
  end

  def create_complaint(attrs = @attrs, comment = @comment, user = @user)
    complaint = Complaint.create(attrs)
    complaint.comment = comment
    complaint.user = user
    complaint.save
    complaint
  end
  
  def create_complaints(total)
    complaints = []
    total.times do
      complaints << FactoryGirl.create(:complaint, :with_comment, :with_user)
    end
    complaints
  end

  describe "GET index" do
    before do
      @complaints = create_complaints(10)
      @complaint = @complaints[-1]
    end
    
    it_should_behave_like "Controller Standard Search" do
      let(:instances) { @complaints }
      let(:instance) { @complaint }
      let(:instances_symbol) { :complaints }
    end
    
    describe "Special search cases" do
      it "assigns complaints searching by comment_id" do
        get :index, {:comment_id => @complaint.comment.id}
        assigns(:complaints).should eq([@complaint])
      end
      
      it "assigns complaints searching by user_id" do
        get :index, {:user_id => @complaint.user.id}
        assigns(:complaints).should eq([@complaint])
      end
      
      it "assigns complaints searching by comment_id and user_id" do
        get :index, {:comment_id => @complaint.comment.id, :user_id => @complaint.user.id}
        assigns(:complaints).should eq([@complaint])
      end
    end
  end

  describe "GET show" do
    it "assigns the requested complaint as @complaint" do
      complaint = create_complaint
      get :show, {:id => complaint.to_param}
      assigns(:complaint).should eq(complaint)
    end
  end

  describe "GET new" do
    it "assigns a new complaint as @complaint" do
      get :new, {}
      assigns(:complaint).should be_a_new(Complaint)
    end
  end

  describe "GET edit" do
    it "assigns the requested complaint as @complaint" do
      complaint = create_complaint
      get :edit, {:id => complaint.to_param}
      assigns(:complaint).should eq(complaint)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Admin::Complaint" do
        expect {
          post :create, {:complaint => valid_attributes}
        }.to change(Complaint, :count).by(1)
      end

      it "assigns a newly created complaint as @complaint" do
        post :create, {:complaint => valid_attributes}
        assigns(:complaint).should be_a(Complaint)
        assigns(:complaint).should be_persisted
      end

      it "redirects to the created complaint" do
        post :create, {:complaint => valid_attributes}
        response.should redirect_to([:admin, Complaint.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved complaint as @complaint" do
        # Trigger the behavior that occurs when invalid params are submitted
        Complaint.any_instance.stub(:save).and_return(false)
        post :create, {:complaint => {}}
        assigns(:complaint).should be_a_new(Complaint)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Complaint.any_instance.stub(:save).and_return(false)
        post :create, {:complaint => {}}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested complaint" do
        complaint = create_complaint
        # Assuming there are no other complaints in the database, this
        # specifies that the Complaint created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Complaint.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => complaint.to_param, :complaint => {'these' => 'params'}}
      end

      it "assigns the requested admin_complaint as @complaint" do
        complaint = create_complaint
        put :update, {:id => complaint.to_param, :complaint => valid_attributes}
        assigns(:complaint).should eq(complaint)
      end

      it "redirects to the admin_complaint" do
        complaint = create_complaint
        put :update, {:id => complaint.to_param, :complaint => valid_attributes}
        response.should redirect_to([:admin, complaint])
      end
    end

    describe "with invalid params" do
      it "assigns the admin_complaint as @complaint" do
        complaint = create_complaint
        # Trigger the behavior that occurs when invalid params are submitted
        Complaint.any_instance.stub(:save).and_return(false)
        put :update, {:id => complaint.to_param, :complaint => {}}
        assigns(:complaint).should eq(complaint)
      end

      it "re-renders the 'edit' template" do
        complaint = create_complaint
        # Trigger the behavior that occurs when invalid params are submitted
        Complaint.any_instance.stub(:save).and_return(false)
        put :update, {:id => complaint.to_param, :complaint => {}}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested admin_complaint" do
      complaint = create_complaint
      expect {
        delete :destroy, {:id => complaint.to_param}
      }.to change(Complaint, :count).by(-1)
      complaint.reload.should be_deleted
    end

    it "redirects to the complaints list" do
      complaint = create_complaint
      delete :destroy, {:id => complaint.to_param}
      response.should redirect_to(admin_complaints_url)
    end
  end

  describe "CHANGE_STATUS request" do
    before do
      @complaint = create_complaint
      @complaint.save
    end
    
    context "Valid status" do
      Complaint.target_status.each do |status|
        it_should_behave_like "valid #{status} status change" do
          subject { @complaint }
        end
      end
    end
    
    context "Invalid status" do
      Complaint.invalid_status.each do |status|
        it_should_behave_like "invalid #{status} status change" do
          subject { @complaint }
        end
      end
    end
  end
end
