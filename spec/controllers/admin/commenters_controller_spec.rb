require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::CommentersController do
  render_views
  
  # This should return the minimal set of attributes required to create a valid
  # Commenter. As you add validations to Commenter, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {:name => "Commenter Name", 
     :username => "commenter",
     :email => "commenter@infodebate.com",
     :password => "secret",
     :password_confirmation => "secret"}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommentersController. Be sure to keep this updated too.
  def valid_session
    {}
  end

 
  describe "GET index" do
    before do
      @commenter = FactoryGirl.create(:commenter)
      @commenters = [@commenter]
      35.times do
        @commenters << FactoryGirl.create(:commenter, 
                                            :name => FactoryGirl.generate(:name),
                                            :username => FactoryGirl.generate(:username),
                                            :email => FactoryGirl.generate(:email))
      end
    end
        
    it "should limit commenters length" do
      get :index, {}, valid_session
      assigns(:commenters).length.should eq(PER_PAGE)
    end
    
    it "should have pagination information" do
      get :index, {}, valid_session
      response.should have_selector("div.pagination")
      response.should have_selector("li.disabled", :content => "Previous")
      response.should have_selector("a", :href => admin_commenters_path(:page => 2),
                                         :content => "2")
      response.should have_selector("a", :href => admin_commenters_path(:page => 2),
                                         :content => "Next")
    end
    
    context "search" do
      it "should find commenter by name" do
        get :index, {:q => @commenter.name}
        response.should have_selector("td", :content => @commenter.id.to_s)
      end
      
      it "should find commenter by username" do
        get :index, {:q => @commenter.username}
        response.should have_selector("td", :content => @commenter.id.to_s)
      end
      
      it "should find commenter by email" do
        get :index, {:q => @commenter.email}
        response.should have_selector("td", :content => @commenter.id.to_s)
      end
      
      it "should not find commenter by wrong name" do
        get :index, {:q => "wrong"}
        response.should_not have_selector("td", :content => @commenter.id.to_s)
      end
    end
  end


  describe "GET show" do
    it "assigns the requested commenter as @commenter" do
      commenter = Commenter.create! valid_attributes
      get :show, {:id => commenter.to_param}, valid_session
      assigns(:commenter).should eq(commenter)
    end
  end

  describe "GET new" do
    it "assigns a new commenter as @commenter" do
      get :new, {}, valid_session
      assigns(:commenter).should be_a_new(Commenter)
    end
  end

  describe "GET edit" do
    it "assigns the requested commenter as @commenter" do
      commenter = Commenter.create! valid_attributes
      get :edit, {:id => commenter.to_param}, valid_session
      assigns(:commenter).should eq(commenter)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Commenter" do
        expect {
          post :create, {:commenter => valid_attributes}, valid_session
        }.to change(Commenter, :count).by(1)
      end

      it "assigns a newly created commenter as @commenter" do
        post :create, {:commenter => valid_attributes}, valid_session
        assigns(:commenter).should be_a(Commenter)
        assigns(:commenter).should be_persisted
      end

      it "redirects to the created commenter" do
        post :create, {:commenter => valid_attributes}, valid_session
        response.should redirect_to([:admin, Commenter.last])
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved commenter as @commenter" do
        # Trigger the behavior that occurs when invalid params are submitted
        Commenter.any_instance.stub(:save).and_return(false)
        post :create, {:commenter => {}}, valid_session
        assigns(:commenter).should be_a_new(Commenter)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Commenter.any_instance.stub(:save).and_return(false)
        post :create, {:commenter => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    before do
      @valid_update_attrs = valid_attributes.except(:password, 
                                                    :password_confirmation,
                                                    :username)
    end
    
    describe "with valid params" do
      it "updates the requested commenter" do
        commenter = Commenter.create! valid_attributes
        # Assuming there are no other commenters in the database, this
        # specifies that the Commenter created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Commenter.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => commenter.to_param, :commenter => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested commenter as @commenter" do
        commenter = Commenter.create! valid_attributes
        put :update, {:id => commenter.to_param, :commenter => @valid_update_attrs}, valid_session
        assigns(:commenter).should eq(commenter)
      end

      it "redirects to the commenter" do
        commenter = Commenter.create! valid_attributes
        put :update, {:id => commenter.to_param, :commenter => @valid_update_attrs}, valid_session
        response.should redirect_to([:admin, commenter])
      end
    end

    describe "with invalid params" do
      it "assigns the commenter as @commenter" do
        commenter = Commenter.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Commenter.any_instance.stub(:save).and_return(false)
        put :update, {:id => commenter.to_param, :commenter => {}}, valid_session
        assigns(:commenter).should eq(commenter)
      end

      it "re-renders the 'edit' template" do
        commenter = Commenter.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Commenter.any_instance.stub(:save).and_return(false)
        put :update, {:id => commenter.to_param, :commenter => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested commenter" do
      commenter = Commenter.create! valid_attributes
      expect {
        delete :destroy, {:id => commenter.to_param}, valid_session
      }.to change(Commenter, :count).by(-1)
    end

    it "redirects to the commenters list" do
      commenter = Commenter.create! valid_attributes
      delete :destroy, {:id => commenter.to_param}, valid_session
      response.should redirect_to(admin_commenters_url)
    end
  end

end
